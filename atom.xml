<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[James H. Edwards]]></title>
  <link href="http://incrediblesound.github.io/atom.xml" rel="self"/>
  <link href="http://incrediblesound.github.io/"/>
  <updated>2014-08-10T21:31:08-07:00</updated>
  <id>http://incrediblesound.github.io/</id>
  <author>
    <name><![CDATA[James Howe Edwards]]></name>
    <email><![CDATA[james.howe.edwards@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Event Systems Unraveled]]></title>
    <link href="http://incrediblesound.github.io/blog/2014/08/08/how-to-make-an-event-system-in-javascript/"/>
    <updated>2014-08-08T18:07:13-07:00</updated>
    <id>http://incrediblesound.github.io/blog/2014/08/08/how-to-make-an-event-system-in-javascript</id>
    <content type="html"><![CDATA[<p>Events are an extremely useful aspect of many JavaScript frameworks, but their functionality can seem bizarre if you don&rsquo;t know what&rsquo;s going on under the hood. In this blog post I will explain the inner workings of an event system, in particular how it can function as part of a system of classes. Because this explanation involves some discussion of classes you should definitely read my blog post on JavaScript subclasses first if you are unclear about that subject.<!--more--></p>

<p>Let&rsquo;s imagine a production system involving a manufacturing center and a shipping service. When the factory is finished making the products, shipping needs to be informed so that they can come and pick them up for distribution. We can start with a simple set of JavaScript objects to represent these units:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">factory</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//notifies shipping when products are completed</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">shipping</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//picks up products when they are completed</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point we need to add a system to convey messages. Our messaging system will consist of a method &lsquo;on&rsquo; which sets up a callback to be invoked in response to a given event, and a method &lsquo;trigger&rsquo; which triggers an event, causing the callback functions to be invoked.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Picked up!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//using the &#39;on&#39; we set up the shipping object to listen for the &#39;completed&#39; event</span>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set our event in motion</span>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">)</span> <span class="c1">//=&gt; &#39;Picked up!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To review, our event system is now made up of two methods:
1. object.on(&lsquo;event&rsquo;, callback) set callback to listen to &lsquo;event&rsquo;
1. object.trigger(&lsquo;event&rsquo;) triggers &lsquo;event&rsquo;, invoking all the callbacks listening to it</p>

<p>When you have a set of objects that all share a basic set of methods it makes sense to set up a class that they will delegate to for those methods. Before I discuss this class in detail, take a look at the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Unit</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//each instance an object container for events and their callbacks</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">events</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//store the callbacks that listen for events</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">on</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span> <span class="o">||</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">cb</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//when event &#39;e&#39; is triggered iterate over the callbacks listening to that event and invoke them</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">callbacks</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">callbacks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">k</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">callbacks</span><span class="p">[</span><span class="nx">i</span><span class="p">]();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//instantiate our units as instances of the Unit class</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shipping</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our units now come prepackaged with the methods necessary for a basic event handling system. Our goal is to store functions that will be called when the object triggers a given event. To achieve this, we use the &lsquo;on&rsquo; method, which takes the name of an event as its first parameter and the callback function as its second. This method finds the event name in the events object or sets a new key by that name and then pushes the callback into an array referenced by that key. Now when we call &lsquo;trigger&rsquo; on an object, it uses the event name passed into trigger to find the array and iterate over the callbacks invoking each one. Lets examine this process more closely:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">shipping</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Coming to pick up.&quot;</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">events</span> <span class="c1">//=&gt; {}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">events</span> <span class="c1">//=&gt; { &#39;completed&#39; : function() { console.log(&quot;Coming to pick up.&quot;) } }</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">)</span> <span class="c1">//=&gt; &quot;Coming to pick up.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks good right? Our events system is now working how we wanted. You might, however, notice a problem here: the function referenced by &lsquo;shipping.ship&rsquo; is stored in the events object of the factory without any reference to the shipping unit itself. We may want to refer to properties of the shipping unit but those properties are already long gone when the callback is invoked. Luckily, this problem can be fixed with an anonymous function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">shipping</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'><span class="c1">//give shipping a &#39;name&#39; property</span>
</span><span class='line'><span class="nx">shipping</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Everest Shipping&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//refer to the name property in the ship function</span>
</span><span class='line'><span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is coming to pick up.&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="c1">//store the method invocation inside an anonymous function</span>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">//inspecting the events object we see the shipping object is preserved inside the callback</span>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">events</span> <span class="c1">//=&gt; { &#39;completed&#39;: function(){ shipping.ship() } }</span>
</span><span class='line'><span class="c1">//now when the event is triggered, we have access to properties of the shipping object</span>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">)</span> <span class="c1">//=&gt; &quot;Everest Shipping is coming to pick up.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome! Now we have a reference to the shipping object inside the callback function. But we can make our system even better. What if we could pass data into our callback when we trigger an event? This requires just a small modification to our events system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Unit</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//this.events and this.on() remain unchanged</span>
</span><span class='line'>    <span class="c1">//we add a second parameter to our trigger method called &#39;data&#39;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">callbacks</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">callbacks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">k</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//for each event in the callbacks array, we pass in data as an argument on invocation</span>
</span><span class='line'>        <span class="nx">callbacks</span><span class="p">[</span><span class="nx">i</span><span class="p">](</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that our trigger function can take data as a second parameter and pass it into each callback, our events system effectively manages references to both the object that owns the callback and the object that triggers the event. If we assume that the above modification has been made to our Unit class, we can trigger events that have access to both sides of the event transaction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shipping</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">shipping</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Everest Shipping&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">product</span> <span class="o">=</span> <span class="s2">&quot;smartphone&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//give the callback a &#39;product&#39; parameter to recieve the data argument</span>
</span><span class='line'><span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">product</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is coming to pick up &quot;</span> <span class="o">+</span> <span class="nx">product</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//the callback registered to the event recieves the data and passes it into the ship method</span>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">product</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span><span class="p">(</span><span class="nx">product</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//inspecting the events object reveals the function to be invoked when the event is triggered</span>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">events</span> <span class="c1">//=&gt; { &#39;completed&#39;: function(product){ shipping.ship(product) } }</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="nx">factory</span><span class="p">.</span><span class="nx">product</span><span class="p">)</span> <span class="c1">//=&gt; &quot;Everest Shipping is coming to pick up smartphone.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This concludes my discussion of the events system in JavaScript. For clarity, I will finish with an example demonstrating the use of multiple callbacks for a single event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shipping</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">retailer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Unit</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">shipping</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Everest Shipping&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">product</span> <span class="o">=</span> <span class="s2">&quot;smartphone&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">product</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is coming to pick up &quot;</span> <span class="o">+</span> <span class="nx">product</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="nx">retailer</span><span class="p">.</span><span class="nx">sell</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">product</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="s2">&quot;Now selling the new &quot;</span> <span class="o">+</span> <span class="nx">product</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="nx">consumer</span><span class="p">.</span><span class="nx">use</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">product</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="s2">&quot;This &quot;</span> <span class="o">+</span> <span class="nx">product</span> <span class="o">+</span> <span class="s2">&quot; is awesome!&quot;</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">product</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">shipping</span><span class="p">.</span><span class="nx">ship</span><span class="p">(</span><span class="nx">product</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">product</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">retailer</span><span class="p">.</span><span class="nx">sell</span><span class="p">(</span><span class="nx">product</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">product</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">consumer</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">product</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">factory</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="nx">factory</span><span class="p">.</span><span class="nx">product</span><span class="p">)</span> <span class="c1">//=&gt;</span>
</span><span class='line'><span class="c1">// &quot;Everest Shipping is coming to pick up smartphone&quot;</span>
</span><span class='line'><span class="c1">// &quot;Now selling the new smartphone&quot;</span>
</span><span class='line'><span class="c1">// &quot;This smartphone is awesome!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turning a Prefix Tree Into a Compression Algorithm]]></title>
    <link href="http://incrediblesound.github.io/blog/2014/08/05/how-to-turn-a-prefix-tree-into-a-compression-algorithm/"/>
    <updated>2014-08-05T08:46:05-07:00</updated>
    <id>http://incrediblesound.github.io/blog/2014/08/05/how-to-turn-a-prefix-tree-into-a-compression-algorithm</id>
    <content type="html"><![CDATA[<p>My last post talked about the prefix-tree and went over some basic concepts and implementation. In this post I will explain how I turned a simple prefix-tree into an algorithm for efficiently storing long strings. If you want more info about the basic functionality of a prefix-tree take a look at my previous post or at the <a href="https://github.com/incrediblesound/radix">github repo</a>.<!--more--></p>

<p>When I was experimenting with my prefix tree I realized that it only stored data efficiently if smaller strings were inserted before longer ones. This is because the tree checks to see if there are any nodes that already contain the beginning of the word being inserted, and if so, it chops off that chunk of the word and stores the remainder as a child of that node. So if we are storing &ldquo;dreams&rdquo;, and the tree already has a node &ldquo;dream&rdquo;, it will store &ldquo;s&rdquo; as a child of that node. This efficiency is lost if I already have &ldquo;dreams&rdquo; in the tree and I want to store &ldquo;dream&rdquo;, it would store &ldquo;dream&rdquo; as a new node at the same level unless I did some clever re-balancing.</p>

<p>When I realized this point I had the idea of adding a function that takes an array of words, sorts them by length, and then inserts each word into the tree in order from shortest to longest. Then I realized that if I could take a string as input, split it into an array, sort the array, insert it into the tree, and then reconstruct the original input string, I would have a compression algorithm. With that idea in mind I came up with a plan for modifications to my original function:</p>

<ol>
<li>Add a new insert function that accepts a string, turns it into a sorted array and inserts the contents of the array into the tree.</li>
<li>Remember the position of each word in the original string and store it in the tree</li>
<li>Adjust the reconstruct function so that it returns the original input string exactly.</li>
</ol>


<p>Step one was easy: the new insert function, which I called documentInsert, simply adds a layer of processing on top of the original insert function. To accomplish step two I couldn&rsquo;t just insert the word itself, I had to bundle each word up with its position in the original string and insert that into the tree. Those two steps are both accomplished in the following function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Radix</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">documentInsert</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//turn the input string into an array</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">splitString</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//iterate through the array and save each word in an object together with the </span>
</span><span class='line'>  <span class="c1">//original index of that word </span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span> <span class="o">&lt;</span> <span class="nx">splitString</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">k</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">string</span><span class="o">:</span> <span class="nx">splitString</span><span class="p">[</span><span class="nx">k</span><span class="p">],</span> <span class="nx">index</span><span class="o">:</span> <span class="nx">k</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">sort</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">left</span><span class="p">,</span> <span class="nx">right</span><span class="p">)</span> <span class="p">{...};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">merge</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">array</span><span class="p">){...};</span>
</span><span class='line'>  <span class="c1">//this merge sort is modified to look into the objects stored in the array </span>
</span><span class='line'>  <span class="c1">//and sort them by string length, producing an array of objects </span>
</span><span class='line'>  <span class="c1">//storing words in order from shortest to longest.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">sorted</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//iterate over the sorted array and insert each object into the tree</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">sorted</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">sorted</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Storing the location of each word is simple: each node of the tree is initialized with an array called &lsquo;locations&rsquo; that stores the index of the word in the pre-sorted input array. Words that are repeated in the original string will have different locations, so I modified the insert function such that when the inserted word is found to have been previously stored in the current tree I push the index of the inserted word onto the locations array of that node. This way each node stores a single word along with all the locations of that word in the original string.</p>

<p>The reconstruct function also has to be modified. I found the easiest way to do this was with a subroutine function defined within the reconstruct function. The reconstruct function holds a result array and a search function. It calls the search function on the root node which traverses the entire tree. At each node of the tree, the search function iterates over the locations array and sets the indexes of the results array corresponding to those locations to the word stored at that node. Before you look at the code, consider this simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">locations</span><span class="o">:</span> <span class="p">[</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//if we set the indexes of results defined by the locations array </span>
</span><span class='line'><span class="c1">//to the value of the node we get this:</span>
</span><span class='line'><span class="nx">results</span> <span class="o">=</span> <span class="p">[</span> <span class="kc">undefined</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span> <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because the locations correspond to the original locations of the words, it is not important in what order the node are visited, so long as the correct word for each node can be reconstructed. Now take a look at the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Radix</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reconstruct</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">value</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//each word is constructed by the current node value appended to the sum of the </span>
</span><span class='line'>      <span class="c1">//previous node values.</span>
</span><span class='line'>      <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span> <span class="o">+</span> <span class="nx">context</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//at the root we set value to the empty string</span>
</span><span class='line'>      <span class="nx">value</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//if value is not an empty string, iterate over the locations array and add the current</span>
</span><span class='line'>    <span class="c1">//value to the result array at the indexes stored there</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span> <span class="o">&lt;</span> <span class="nx">context</span><span class="p">.</span><span class="nx">locations</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">result</span><span class="p">[</span><span class="nx">context</span><span class="p">.</span><span class="nx">locations</span><span class="p">[</span><span class="nx">k</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//if the current node has children iterate over them and call search recursively on each child</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">node</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">context</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">node</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">search</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//call search on the root node and then return the result array after </span>
</span><span class='line'>  <span class="c1">//turning it back into a string with the join method</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">search</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that all three steps are complete the new function can accept a string, store it in a compressed form, and reconstruct the original input. Compression rates will vary based on the amount of redundant information in the string. I have seen rates of between 2:1 and 3:1 in my experiments. I encourage readers to experiment with or improve on the function, which can be downloaded from npm:</p>

<pre><code>&gt;npm install radix-compression
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is a Compact Prefix Tree?]]></title>
    <link href="http://incrediblesound.github.io/blog/2014/08/02/what-is-a-compact-prefix-tree/"/>
    <updated>2014-08-02T14:05:48-07:00</updated>
    <id>http://incrediblesound.github.io/blog/2014/08/02/what-is-a-compact-prefix-tree</id>
    <content type="html"><![CDATA[<p>There are a lot of data-structures out there and sometimes it can be hard to figure out what is worth learning or, even more important, what is useful for a given application. The compact prefix tree is a data-structure that I discovered recently and that I think it is interesting, fun to implement, and potentially very useful for a range of applications. In this post I will go over the basic implementation and uses of the compact prefix tree.<!--more--></p>

<p>The compact prefix tree, or CPT, is basically a method for storing strings, most often individual words. The CPT economises by saving the difference between strings instead of the full string. The constructor function looks just like a normal tree:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Radix</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we initialize the tree with no value. This will set our root as a base for saving a set of distinct branches, we&rsquo;ll see why we do this in a second. The special thing about the CPT is the insert method. Lets start by inserting the string &lsquo;to&rsquo; into the tree:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tree</span><span class="p">.</span><span class="nx">value</span> <span class="c1">//=&gt; &#39;&#39;</span>
</span><span class='line'><span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">//=&gt; Tree {value: &#39;to&#39;, children: []}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our root has a single child with value &lsquo;to&rsquo;. What if we insert &lsquo;tons&rsquo; into our root?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tree</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="s1">&#39;tons&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">//=&gt; Tree {value: &#39;to&#39;, children: []}</span>
</span><span class='line'><span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">//=&gt; Tree {value: &#39;ns&#39;, children: []}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our CPT finds that the beginning of our input string is already stored in the tree and it stores the difference between this value and the input value in a child node of the node containing the &ldquo;prefix&rdquo; value. Ok so can you guess what happens if we insert &ldquo;tonsils&rdquo;?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tree</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="s1">&#39;tonsils&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">//=&gt; &#39;ils&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because &lsquo;to&rsquo; and &lsquo;ns&rsquo; are already in the tree, our CPT simply stores the remaining value after these strings are removed in a new child node. Now we can call our reconstruct function which will reconstruct our input like this:</p>

<ol>
<li>Starting at our root, no value, call reconstruct recursively on all children</li>
<li>At first child, return value + previous value, so we get &lsquo;&rsquo;+&lsquo;to&rsquo; = &lsquo;to&rsquo;</li>
<li>At second child, return value + previous value &lsquo;to&rsquo;+&lsquo;ns&rsquo; = &lsquo;tons&rsquo;</li>
<li>And again, at the third child &lsquo;tons&rsquo;+&lsquo;ils&rsquo; = &lsquo;tonsils&rsquo;</li>
</ol>


<p>I also gave my CPT a countChars function to count how many characters are actually stored in the tree, but here it is quite easy to see that we are storing just seven characters for a total input value of thirteen characters. This is the first advantage of the CPT, it compresses strings by eliminating the storage of redundant information. In any situation where a lot of words have to be stored economically, such as in a dictionary, the CPT is a highly economical choice. But there is another use to the CPT that hearkens back to the days of nokia flips phones.</p>

<p>What if we give a CPT an input string and tell it to return all the words in the tree starting with the first node containing a string that is longer than the input but has the input as a prefix. So, for example, if we give our tree the input &lsquo;ton&rsquo;, it will return every string longer than three characters that starts with &lsquo;ton&rsquo;. And voila, we have auto-complete! Lets go over how that algorithm works step by step.</p>

<ol>
<li>Make &lsquo;current string&rsquo; by adding the current node&rsquo;s value onto the sum of previous values</li>
<li>Iterate over the child nodes of the current node

<ol type="a">
<li>If &lsquo;current string&rsquo; plus this child&rsquo;s value matches part of the beginning of our target string,
 call auto-complete recursively on this child</li>
<li>If our target string matches part of the beginning of &lsquo;current string&rsquo; plus this child&rsquo;s value,
 call reconstruct on this child and append the result to a return array.</li>
</ol>
</li>
</ol>


<p>For each node, we check to see if the word represented by this node matches any amount of characters in our target starting at the beginning. If so, this node is a &lsquo;prefix&rsquo; node of our target, and we have to go deeper down the tree along that branch. If, on the other hand, the word represented by this node is longer than our target and our target is a prefix of this word, we start reconstructing the tree with this node as the root.</p>

<p>To sum up, I&rsquo;ll show give you the code for this last function to look at, but I encourage you to check out my <a href="https://github.com/incrediblesound/radix">github repository</a> to see the full code for a compact prefix-tree.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Radix</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">complete</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">previous</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">current</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">current</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">previous</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">current</span> <span class="o">=</span> <span class="nx">previous</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">chk</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;^&#39;</span><span class="o">+</span><span class="nx">current</span><span class="o">+</span><span class="nx">node</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;\.*&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">tst</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;^&#39;</span><span class="o">+</span><span class="nx">target</span><span class="o">+</span><span class="s1">&#39;\.*&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">chk</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">target</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">complete</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">current</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">tst</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">current</span><span class="o">+</span><span class="nx">node</span><span class="p">.</span><span class="nx">value</span><span class="p">)){</span>
</span><span class='line'>        <span class="nx">result</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">reconstruct</span><span class="p">(</span><span class="nx">current</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Subclasses the Right Way]]></title>
    <link href="http://incrediblesound.github.io/blog/2014/07/28/javascript-subclasses-the-right-way/"/>
    <updated>2014-07-28T12:00:04-07:00</updated>
    <id>http://incrediblesound.github.io/blog/2014/07/28/javascript-subclasses-the-right-way</id>
    <content type="html"><![CDATA[<p>There is a lot of misinformation on the web about making classes and subclasses in JavaScript. Since the right way is both simple and logical, clearing the air about this issue will not be hard. The problem we face has three steps&hellip;<!--more--></p>

<ol>
<li>How do I make a object delegate to another object?</li>
<li>How do I make a class* in JavaScript?</li>
<li>How do I make a subclass that delegates to another class?</li>
</ol>


<p>*javascript doesn&rsquo;t really have classes but there is a way to hack it</p>

<p>The first problem is rather simple, lets say we define an object called &lsquo;orator&rsquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">orator</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">oratory</span><span class="o">:</span> <span class="s1">&#39;And so it was that...&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">orate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oratory</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have an orator object we can create an orator and call the methods we just defined:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="nx">orator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">me</span><span class="p">.</span><span class="nx">orate</span><span class="p">()</span> <span class="c1">//=&gt; &#39;And so it was that...&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great, now I am an orator. But what if I want to be a professor? A professor is like an orator, except that there is a specific subject that she talks about. To do this we have to</p>

<ol>
<li>Define a function that takes the &lsquo;subject&rsquo; parameter as an argument</li>
<li>Within the function body, create an object that delegates to the orator</li>
<li>Modify the oratory so that it returns a professor specific oration</li>
<li>Return the object</li>
</ol>


<p>Step two is the most important part of this process. In JavaScript, if you make a new object with Object.create() and pass an existing object into the create method like this&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">newobject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">existingObject</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>then the new object delegates to the existing object for all failed property and method lookups. That means that if we check our new object for any given property or method and the check <strong>fails</strong>, that is, the property or method does not exist on the new object, then the javascript interpreter will check the existing object for that property or methods and return it if the lookup on that object is successful. That means we can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">first</span><span class="o">:</span> <span class="s1">&#39;I\&#39;m number one!&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">second</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">.</span><span class="nx">first</span><span class="p">);</span> <span class="c1">//=&gt; &#39;I\&#39;m number one!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we can delegate properties and methods we can focus on making our (kindof) class. JavaScript has a very simple pattern for making a pseudoclass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Class</span><span class="p">(</span><span class="nx">prop1</span><span class="p">,</span> <span class="nx">prop1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">prop1</span> <span class="o">=</span> <span class="nx">prop1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">prop2</span> <span class="o">=</span> <span class="nx">prop2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Class</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">method</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Class</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is important to understand exactly what is going on here. When we use the &lsquo;new&rsquo; keyword on line eight, the javascript interpreter adds two lines to our code before making our object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Class</span><span class="p">(</span><span class="nx">prop1</span><span class="p">,</span> <span class="nx">prop2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Class</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">prop1</span> <span class="o">=</span> <span class="nx">prop1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">prop2</span> <span class="o">=</span> <span class="nx">prop2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should now be fairly clear now how this object is constructed. But what about line six on the example before this one? It turns out that javascript gives us a built-in property specifically for storing <strong>methods</strong> for our class. Any method stored on the Class.prototype will be available on a new instance of the class because, as we see on line 2 of this example, the object returned by the constructor function is created with the prototype as its delegate. Our constructor function will not generate new functions every time an instance is created, and instead will delegate to the prototype of the class. Here is our orator constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Orator</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">oratory</span> <span class="o">=</span> <span class="s1">&#39;And so it was that...&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">verbose</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Orator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">orate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oratory</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To create a professor sub-class, we simply make a new professor class, define the properties that distinguish the professor from the orator and then set the professor prototype to a new object that delegates to the orator prototype. Now all failed calls to methods on a professor will delegate up the chain to the orator prototype.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Professor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">subject</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">oratory</span> <span class="o">=</span> <span class="s1">&#39;Today we will discuss &#39;</span><span class="o">+</span><span class="nx">subject</span><span class="o">+</span><span class="s1">&#39;.&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Professor</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Orator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow our professor to inherit the methods of the orator. If we also want to inherit the properties of the orator, we have to call its constructor function within the professor constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Professor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">subject</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">Orator</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">oratory</span> <span class="o">=</span> <span class="s1">&#39;Today we will discuss &#39;</span><span class="o">+</span><span class="nx">subject</span><span class="o">+</span><span class="s1">&#39;.&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Professor</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Orator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will copy all the orator&rsquo;s properties into the professor. Notice that the oratory property will be copied and then overwritten by the professor constructor function during instantiation. And now we have a full subclass that inherits both properties and methods of the super-class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Integrate an App With Mongoose]]></title>
    <link href="http://incrediblesound.github.io/blog/2014/07/27/how-to-integrate-an-app-with-mongoose/"/>
    <updated>2014-07-27T20:19:32-07:00</updated>
    <id>http://incrediblesound.github.io/blog/2014/07/27/how-to-integrate-an-app-with-mongoose</id>
    <content type="html"><![CDATA[<p>This is the second of two posts about my mongoose plugin <a href="https://www.npmjs.org/package/category-tree">category-tree</a>. In the last post we looked at an algorithm that finds a path to a leaf node through a tree of categories. With that step done, we need to apply the path to the correct properties of the document before it is saved to the database. This post explains how I integrated my app with mongoose so that it is called every time a document is saved.<!--more--></p>

<p>If we look at the documentation for <a href="http://mongoosejs.com/docs/middleware.html">mongoose middleware</a> we see that that middleware can be called before or after the init, validate, save and remove methods. Because my app sets properties of the document before it is saved, I use the pre-save format. Additionally, the middleware must be wrapped in a function that takes the schema as an argument and is exported for use in Node. The basic outline for this construction looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">middleware</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">schema</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">schema</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">&#39;save&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">cb</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data parameter holds whatever is passed to the save method on the document, and the callback is passed into next at the end of the function. The body of the function is simple:</p>

<ol>
<li>Get the category labels that correspond to the document properties.</li>
<li>Run the makePath algorithm to get the path through the tree.</li>
<li>Store a reference to the document schema.</li>
<li>Use the category labels to iterate over the schema properties and set them to the categories determined by the makePath algorithm.</li>
<li>Invoke next with the callback parameter.</li>
</ol>


<p>This function will interrupt the save method and set all the category properties of the document before continuing on. To use the middleware we have to add it to the schema: where your mongoose schemas are declared, pass the middleware function into the plugin method of the schema. Here is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">categorytree</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;category-tree&#39;</span><span class="p">).</span><span class="nx">autoCat</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Product</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">description</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">price</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">subDepartment</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">category</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">subCategory</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Product</span><span class="p">.</span><span class="nx">plugin</span><span class="p">(</span><span class="nx">categorytree</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can use the app by passing the value for the most specific category, in this case &lsquo;subCategory&rsquo;, into the save method when saving a new item to the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nx">product</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;security cam&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;hi fi&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">price</span><span class="o">:</span> <span class="s1">&#39;one million dollars&#39;</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">save</span><span class="p">(</span><span class="s1">&#39;security&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do stuff</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>We do not need to set any of the category properties of this item because they are all set automatically. The above code saves the following document to the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">__v</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">subCategory</span><span class="o">:</span> <span class="s1">&#39;security&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">category</span><span class="o">:</span> <span class="s1">&#39;electronics&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">department</span><span class="o">:</span> <span class="s1">&#39;household&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;security cam&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;hi fi&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">price</span><span class="o">:</span> <span class="s1">&#39;one million dollars&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">_id</span><span class="o">:</span> <span class="mi">1234</span><span class="nx">omg</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Find a Path Through a Tree With JavaScript]]></title>
    <link href="http://incrediblesound.github.io/blog/2014/07/27/how-to-find-a-path-through-a-tree-with-javascript/"/>
    <updated>2014-07-27T19:17:52-07:00</updated>
    <id>http://incrediblesound.github.io/blog/2014/07/27/how-to-find-a-path-through-a-tree-with-javascript</id>
    <content type="html"><![CDATA[<p>This is the first of two blog posts about my mongoose plugin <a href="https://www.npmjs.org/package/category-tree">category-tree</a>. The plugin is designed to automate save a series of hierarchical catagories by passing the most specific category to the save callback when saving an item to the database. <!--more--> In order to accomplish this task, the app needs to have a taxonomic tree containing all the category names in the system, and a set of names for each of the categories. A code example will serve to illustrate what I mean:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">productTree</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">products</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">household</span><span class="o">:</span><span class="p">{</span> <span class="nx">appliance</span><span class="o">:</span><span class="p">{},</span> <span class="nx">electronics</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">sound_video</span><span class="o">:</span><span class="p">{</span> <span class="nx">speakers</span><span class="o">:</span><span class="p">{},</span> <span class="nx">tvs</span><span class="o">:</span><span class="p">{}</span> <span class="p">},</span>
</span><span class='line'>          <span class="nx">security</span><span class="o">:</span><span class="p">{}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>      <span class="nx">office</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">computers</span><span class="o">:</span><span class="p">{},</span>
</span><span class='line'>          <span class="nx">desk</span><span class="o">:</span><span class="p">{</span> <span class="nx">pens</span><span class="o">:</span><span class="p">{},</span> <span class="nx">stationary</span><span class="o">:</span><span class="p">{}</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">categories</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;department&#39;</span><span class="p">,</span><span class="s1">&#39;subDepartment&#39;</span><span class="p">,</span><span class="s1">&#39;category&#39;</span><span class="p">,</span><span class="s1">&#39;subCategory&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each property of the &lsquo;productTree&rsquo; object is a potential label for one of the categories, and the categories correspond exactly to properties of a mongoose schema. To set the categories properly you need to be able to find a path through the productTree, and that problem will serve as the subject of this post. My algorithm for finding a path through a tree is described below. The following assumes we are keeping track of an array &lsquo;path&rsquo;, a boolean &lsquo;done&rsquo; and a &lsquo;result&rsquo; variable.</p>

<ol>
<li>Iterate over the child nodes of the current node.</li>
<li>If done is false, check to see if the current child is our target node.</li>
<li>If the current child is our target push it to the path array, set result to path and done to true.</li>
<li>If the current child is not our target, examine the current child for children</li>
<li>If the child has children, set the child to current node and start over at step one. Otherwise do nothing.</li>
<li>If the iteration of the current level finished and done is still false, pop the last node out of the path aray.</li>
</ol>


<p>The above algorithm tries every path through the tree, keeping a record of each path as it progresses. If a given path ends with a negative result, the path leading to that result will be popped off the record. Here is the code in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">makePath</span><span class="p">(</span><span class="nx">tree</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">done</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">path</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">traverse</span><span class="p">(</span><span class="nx">tree</span><span class="p">,</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">tree</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">forEach</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="o">===</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//if we found our target push it to the path</span>
</span><span class='line'>          <span class="nx">path</span><span class="p">[</span><span class="nx">root</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">target</span><span class="p">);</span>
</span><span class='line'>          <span class="c1">//set result to the completed path</span>
</span><span class='line'>          <span class="nx">result</span> <span class="o">=</span> <span class="nx">path</span><span class="p">[</span><span class="nx">root</span><span class="p">];</span>
</span><span class='line'>          <span class="c1">//set done to true to exit the search</span>
</span><span class='line'>          <span class="nx">done</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//if the node does not match we need to check for children</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">newRoot</span> <span class="o">=</span> <span class="nx">tree</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">newRoot</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//if node has children, push the key into our path and check the children for our target</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">[</span><span class="nx">root</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">traverse</span><span class="p">(</span><span class="nx">tree</span><span class="p">[</span><span class="nx">key</span><span class="p">],</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">root</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="c1">//no children means our search of this branch is over</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="c1">//if we leave our for loop but we are not done that means we failed to find our target</span>
</span><span class='line'>    <span class="c1">//in this branch, as a result we need to pop each node out of our path before we return</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">done</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">path</span><span class="p">[</span><span class="nx">root</span><span class="p">].</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//set an array of the root nodes of our product tree. These are super-categories that are</span>
</span><span class='line'>  <span class="c1">//not saved in the item schema, possibly representing types of items, i.e. different schemas.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">roots</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">tree</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">forEach</span><span class="p">(</span><span class="nx">roots</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">path</span><span class="p">[</span><span class="nx">root</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="c1">//traverse our tree, going through each root node until the target leaf is found in the</span>
</span><span class='line'>    <span class="c1">//tree defined by that root node.</span>
</span><span class='line'>    <span class="nx">traverse</span><span class="p">(</span><span class="nx">tree</span><span class="p">[</span><span class="nx">root</span><span class="p">],</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">root</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a new item is saved to the database none of the categories need to be filled out, simply passing the most specific category as the first argument to the save function is sufficient. How this is accomplished is covered in the next blog post, which covers the integration of an app with the Node.js mongoose module.</p>
]]></content>
  </entry>
  
</feed>

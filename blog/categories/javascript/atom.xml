<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | James H. Edwards]]></title>
  <link href="http://incrediblesound.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://incrediblesound.github.io/"/>
  <updated>2014-07-29T19:25:55-07:00</updated>
  <id>http://incrediblesound.github.io/</id>
  <author>
    <name><![CDATA[James Howe Edwards]]></name>
    <email><![CDATA[james.howe.edwards@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Subclasses the Right Way]]></title>
    <link href="http://incrediblesound.github.io/blog/2014/07/28/javascript-subclasses-the-right-way/"/>
    <updated>2014-07-28T12:00:04-07:00</updated>
    <id>http://incrediblesound.github.io/blog/2014/07/28/javascript-subclasses-the-right-way</id>
    <content type="html"><![CDATA[<p>There is a lot of misinformation on the web about making classes and subclasses in JavaScript. Since the right way is both simple and logical, clearing the air about this issue will not be hard. The problem we face has three steps&hellip;<!--more--></p>

<ol>
<li>How do I make a object delegate to another object?</li>
<li>How do I make a class* in JavaScript?</li>
<li>How do I make a subclass that delegates to another class?</li>
</ol>


<p>*javascript doesn&rsquo;t really have classes but there is a way to hack it</p>

<p>The first problem is rather simple, lets say we define an object called &lsquo;orator&rsquo;.</p>

<p>```javascript
var orator = {</p>

<pre><code>oratory: 'And so it was that...',
orate: function(){
    return this.oratory;
}
</code></pre>

<p>}
<code>
Now that we have an orator object we can create an orator and call the methods we just defined:
</code>javascript
var me = orator;</p>

<p>me.orate() //=> &lsquo;And so it was that&hellip;&rsquo;
```
Great, now I am an orator. But what if I want to be a professor? A professor is like an orator, except that there is a specific subject that she talks about. To do this we have to</p>

<ol>
<li>Define a function that takes the &lsquo;subject&rsquo; parameter as an argument</li>
<li>Within the function body, create an object that delegates to the orator</li>
<li>Modify the oratory so that it returns a professor specific oration</li>
<li>Return the object</li>
</ol>


<p>Step two is the most important part of this process. In JavaScript, if you make a new object with Object.create() and pass an existing object into the create method like this&hellip;
<code>javascript
var newobject = Object.create(existingObject);
</code>
then the new object delegates to the existing object for all failed property and method lookups. That means that if we check our new object for any given property or method and the check <strong>fails</strong>, that is, the property or method does not exist on the new object, then the javascript interpreter will check the existing object for that property or methods and return it if the lookup on that object is successful. That means we can do this:
```javascript
var first = {</p>

<pre><code>first: 'I\'m number one!'
</code></pre>

<p>};
var second = Object.create(first);</p>

<p>console.log(second.first); //=> &lsquo;I\&rsquo;m number one!&rsquo;
```
Now that we can delegate properties and methods we can focus on making our (kindof) class. JavaScript has a very simple pattern for making a pseudoclass:</p>

<p>```javascript
var Class(prop1, prop1) {</p>

<pre><code>this.prop1 = prop1;
this.prop2 = prop2;
</code></pre>

<p>}</p>

<p>Class.prototype.method = function(){};</p>

<p>var instance = new Class;
<code>
It is important to understand exactly what is going on here. When we use the 'new' keyword on line eight, the javascript interpreter adds two lines to our code before making our object.
</code>javascript
var Class(prop1, prop2) {</p>

<pre><code>this = Object.create(Class.prototype);
this.prop1 = prop1;
this.prop2 = prop2;
return this;
</code></pre>

<p>}
<code>
It should now be fairly clear now how this object is constructed. But what about line six on the example before this one? It turns out that javascript gives us a built-in property specifically for storing &lt;strong&gt;methods&lt;/strong&gt; for our class. Any method stored on the Class.prototype will be available on a new instance of the class because, as we see on line 2 of this example, the object returned by the constructor function is created with the prototype as its delegate. Our constructor function will not generate new functions every time an instance is created, and instead will delegate to the prototype of the class. Here is our orator constructor:
</code>javascript
var Orator = function(){</p>

<pre><code>this.oratory = 'And so it was that...',
this.verbose = true;
</code></pre>

<p>}</p>

<p>Orator.prototype.orate = function(){</p>

<pre><code>return this.oratory;
</code></pre>

<p>}</p>

<p>```
To create a professor sub-class, we simply make a new professor class, define the properties that distinguish the professor from the orator and then set the professor prototype to a new object that delegates to the orator prototype. Now all failed calls to methods on a professor will delegate up the chain to the orator prototype.</p>

<p>```javascript
var Professor = function(subject){</p>

<pre><code>this.oratory = 'Today we will discuss '+subject+'.';
</code></pre>

<p>}</p>

<p>Professor.prototype = Object.create(Orator.prototype);
<code>
This will allow our professor to inherit the methods of the orator. If we also want to inherit the properties of the orator, we have to call its constructor function within the professor constructor:
</code>javascript
var Professor = function(subject){</p>

<pre><code>Orator.call(this);
this.oratory = 'Today we will discuss '+subject+'.';
</code></pre>

<p>}</p>

<p>Professor.prototype = Object.create(Orator.prototype);
```
This will copy all the orator&rsquo;s properties into the professor. Notice that the oratory property will be copied and then overwritten by the professor constructor function during instantiation. And now we have a full subclass that inherits both properties and methods of the super-class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Integrate an App With Mongoose]]></title>
    <link href="http://incrediblesound.github.io/blog/2014/07/27/how-to-integrate-an-app-with-mongoose/"/>
    <updated>2014-07-27T20:19:32-07:00</updated>
    <id>http://incrediblesound.github.io/blog/2014/07/27/how-to-integrate-an-app-with-mongoose</id>
    <content type="html"><![CDATA[<p>This is the second of two posts about my mongoose plugin <a href="https://www.npmjs.org/package/category-tree">category-tree</a>. In the last post we looked at an algorithm that finds a path to a leaf node through a tree of categories. With that step done, we need to apply the path to the correct properties of the document before it is saved to the database. This post explains how I integrated my app with mongoose so that it is called every time a document is saved.<!--more--></p>

<p>If we look at the documentation for <a href="http://mongoosejs.com/docs/middleware.html">mongoose middleware</a> we see that that middleware can be called before or after the init, validate, save and remove methods. Because my app sets properties of the document before it is saved, I use the pre-save format. Additionally, the middleware must be wrapped in a function that takes the schema as an argument and is exported for use in Node. The basic outline for this construction looks like this:</p>

<p>```javascript
exports.middleware = function(schema){</p>

<pre><code>schema.pre('save', function(next, data, cb){

});
</code></pre>

<p>};
```
The data parameter holds whatever is passed to the save method on the document, and the callback is passed into next at the end of the function. The body of the function is simple:</p>

<ol>
<li>Get the category labels that correspond to the document properties.</li>
<li>Run the makePath algorithm to get the path through the tree.</li>
<li>Store a reference to the document schema.</li>
<li>Use the category labels to iterate over the schema properties and set them to the categories determined by the makePath algorithm.</li>
<li>Invoke next with the callback parameter.</li>
</ol>


<p>This function will interrupt the save method and set all the category properties of the document before continuing on. To use the middleware we have to add it to the schema: where your mongoose schemas are declared, pass the middleware function into the plugin method of the schema. Here is an example:</p>

<p>```javascript
var categorytree = require(&lsquo;category-tree&rsquo;).autoCat;</p>

<p>var Product = new Schema({</p>

<pre><code>name: String,
description: String,
price: String,
subDepartment: String,
category: String,
subCategory: String
</code></pre>

<p>})</p>

<p>Product.plugin(categorytree);
```
Now we can use the app by passing the value for the most specific category, in this case &lsquo;subCategory&rsquo;, into the save method when saving a new item to the database:</p>

<p>```javascript
new product({</p>

<pre><code>name: 'security cam',
description: 'hi fi',
price: 'one million dollars'
</code></pre>

<p>  }).save(&lsquo;security&rsquo;, function(err, data) {</p>

<pre><code>//do stuff
</code></pre>

<p>  })
<code>
We do not need to set any of the category properties of this item because they are all set automatically. The above code saves the following document to the database:
</code>javascript
{ <em>_v: 0,
  subCategory: &lsquo;security&rsquo;,
  category: &lsquo;electronics&rsquo;,
  department: &lsquo;household&rsquo;,
  name: &lsquo;security cam&rsquo;,
  description: &lsquo;hi fi&rsquo;,
  price: &lsquo;one million dollars&rsquo;,
  </em>id: 1234omg }
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Find a Path Through a Tree With JavaScript]]></title>
    <link href="http://incrediblesound.github.io/blog/2014/07/27/how-to-find-a-path-through-a-tree-with-javascript/"/>
    <updated>2014-07-27T19:17:52-07:00</updated>
    <id>http://incrediblesound.github.io/blog/2014/07/27/how-to-find-a-path-through-a-tree-with-javascript</id>
    <content type="html"><![CDATA[<p>This is the first of two blog posts about my mongoose plugin <a href="https://www.npmjs.org/package/category-tree">category-tree</a>. The plugin is designed to automate save a series of hierarchical catagories by passing the most specific category to the save callback when saving an item to the database. <!--more--> In order to accomplish this task, the app needs to have a taxonomic tree containing all the category names in the system, and a set of names for each of the categories. A code example will serve to illustrate what I mean:
```javascript
var productTree = {</p>

<pre><code>products:{    
    household:{ appliance:{}, electronics: {     
        sound_video:{ speakers:{}, tvs:{} },    
        security:{}     
    }     
},    
    office:{ 
        computers:{}, 
        desk:{ pens:{}, stationary:{} } 
    }
} 
</code></pre>

<p>};  <br/>
var categories = [&lsquo;department&rsquo;,&lsquo;subDepartment&rsquo;,&lsquo;category&rsquo;,&lsquo;subCategory&rsquo;]
```
Each property of the &lsquo;productTree&rsquo; object is a potential label for one of the categories, and the categories correspond exactly to properties of a mongoose schema. To set the categories properly you need to be able to find a path through the productTree, and that problem will serve as the subject of this post. My algorithm for finding a path through a tree is described below. The following assumes we are keeping track of an array &lsquo;path&rsquo;, a boolean &lsquo;done&rsquo; and a &lsquo;result&rsquo; variable.</p>

<ol>
<li>Iterate over the child nodes of the current node.</li>
<li>If done is false, check to see if the current child is our target node.</li>
<li>If the current child is our target push it to the path array, set result to path and done to true.</li>
<li>If the current child is not our target, examine the current child for children</li>
<li>If the child has children, set the child to current node and start over at step one. Otherwise do nothing.</li>
<li>If the iteration of the current level finished and done is still false, pop the last node out of the path aray.</li>
</ol>


<p>The above algorithm tries every path through the tree, keeping a record of each path as it progresses. If a given path ends with a negative result, the path leading to that result will be popped off the record. Here is the code in JavaScript:</p>

<p>```javascript
function makePath(tree, target) {</p>

<p>  var result,</p>

<pre><code>  done = false,
  path = {};
</code></pre>

<p>  function traverse(tree, target, root) {</p>

<pre><code>var keys = Object.keys(tree);
forEach(keys, function(key) {
  if (!done) {
    if (key === target) {
      //if we found our target push it to the path
      path[root].push(target);
      //set result to the completed path
      result = path[root];
      //set done to true to exit the search
      done = true; 
      return;
    } else {
      //if the node does not match we need to check for children
      var newRoot = tree[key];
      if(Object.keys(newRoot).length &gt; 0) {
        //if node has children, push the key into our path and check the children for our target
        path[root].push(key);
        return traverse(tree[key], target, root);  
      }
      //no children means our search of this branch is over
      return;
    }
  } 
});
//if we leave our for loop but we are not done that means we failed to find our target
//in this branch, as a result we need to pop each node out of our path before we return
if (!done){ 
  path[root].pop(); 
}
return;
</code></pre>

<p>  };</p>

<p>  //set an array of the root nodes of our product tree. These are super-categories that are
  //not saved in the item schema, possibly representing types of items, i.e. different schemas.
  var roots = Object.keys(tree);
  forEach(roots, function (root) {</p>

<pre><code>path[root] = [];
//traverse our tree, going through each root node until the target leaf is found in the
//tree defined by that root node.
traverse(tree[root], target, root);
</code></pre>

<p>  });</p>

<p>  return result;
};
```
When a new item is saved to the database none of the categories need to be filled out, simply passing the most specific category as the first argument to the save function is sufficient. How this is accomplished is covered in the next blog post, which covers the integration of an app with the Node.js mongoose module.</p>
]]></content>
  </entry>
  
</feed>
